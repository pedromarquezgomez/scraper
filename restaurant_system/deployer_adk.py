#!/usr/bin/env python3
"""
Deployer ADK - Sistema Multi-Agente para Vertex AI Agent Engine
Arquitectura modular usando extra_packages en lugar de c√≥digo autocontenido.
"""

import os
import sys
from pathlib import Path
from typing import Dict, List, Any
import vertexai
from google.adk.agents import Agent
from google.adk.tools import FunctionTool
from vertexai.preview import reasoning_engines
from vertexai import agent_engines

# Configuraci√≥n del proyecto
PROJECT_ID = "sumy-464008"
LOCATION = "us-central1"
STAGING_BUCKET = "gs://sumy-agent-staging"

print("üöÄ Deployer ADK - Sistema Multi-Agente para Restaurant SaaS")
print(f"   Proyecto: {PROJECT_ID}")
print(f"   Regi√≥n: {LOCATION}")
print(f"   Staging: {STAGING_BUCKET}")
print("=" * 60)

# 1. Inicializar Vertex AI
print("üîß Paso 1: Inicializando Vertex AI...")
vertexai.init(
    project=PROJECT_ID,
    location=LOCATION,
    staging_bucket=STAGING_BUCKET,
)
print(f"‚úÖ Vertex AI inicializado correctamente")

# 2. Definir herramientas del sistema multiagente
def get_available_restaurants() -> Dict[str, Any]:
    """Obtiene la lista de restaurantes disponibles en el sistema SaaS"""
    return {
        "status": "success",
        "restaurants": [
            {
                "id": "bistro_madrid",
                "name": "Bistro Madrid",
                "type": "modern_casual",
                "location": "Madrid, Espa√±a",
                "description": "Restaurante moderno con fusi√≥n mediterr√°nea"
            },
            {
                "id": "pizza_palace", 
                "name": "Pizza Palace",
                "type": "pizzeria",
                "location": "Barcelona, Espa√±a",
                "description": "Pizzer√≠a aut√©ntica italiana"
            },
            {
                "id": "demo_restaurant",
                "name": "Demo Restaurant",
                "type": "fine_dining",
                "location": "Valencia, Espa√±a", 
                "description": "Restaurante de demostraci√≥n para pruebas"
            },
            {
                "id": "caf_madrid_test",
                "name": "Caf√© Madrid Test",
                "type": "cafe",
                "location": "Madrid, Espa√±a",
                "description": "Caf√© de pruebas en Madrid"
            }
        ],
        "total_count": 4
    }

def get_restaurant_info(restaurant_id: str = "bistro_madrid") -> Dict[str, Any]:
    """Obtiene informaci√≥n espec√≠fica de un restaurante"""
    restaurants = {
        "bistro_madrid": {
            "name": "Bistro Madrid",
            "type": "modern_casual",
            "location": "Madrid, Espa√±a",
            "cuisine": "Mediterr√°nea moderna",
            "specialty": "Paella de mariscos y risottos gourmet",
            "price_range": "‚Ç¨‚Ç¨‚Ç¨",
            "hours": "12:00-23:30",
            "features": ["Terraza", "Men√∫ degustaci√≥n", "Vinos selectos"],
            "description": "Restaurante que fusiona la cocina mediterr√°nea tradicional con t√©cnicas modernas"
        },
        "pizza_palace": {
            "name": "Pizza Palace",
            "type": "pizzeria", 
            "location": "Barcelona, Espa√±a",
            "cuisine": "Italiana",
            "specialty": "Pizza Margherita Premium y Quattro Stagioni",
            "price_range": "‚Ç¨‚Ç¨",
            "hours": "12:00-24:00",
            "features": ["Horno de le√±a", "Masa madre", "Ingredientes importados"],
            "description": "Pizzer√≠a aut√©ntica italiana con recetas tradicionales"
        },
        "demo_restaurant": {
            "name": "Demo Restaurant",
            "type": "fine_dining",
            "location": "Valencia, Espa√±a",
            "cuisine": "Alta cocina internacional",
            "specialty": "Men√∫ degustaci√≥n de temporada",
            "price_range": "‚Ç¨‚Ç¨‚Ç¨‚Ç¨",
            "hours": "19:00-23:00",
            "features": ["Estrella Michelin", "Chef ejecutivo", "Maridaje"],
            "description": "Restaurante de alta cocina para demostraciones del sistema"
        },
        "caf_madrid_test": {
            "name": "Caf√© Madrid Test",
            "type": "cafe",
            "location": "Madrid, Espa√±a", 
            "cuisine": "Cafeter√≠a y reposter√≠a",
            "specialty": "Caf√© de especialidad y tartas caseras",
            "price_range": "‚Ç¨",
            "hours": "07:00-22:00",
            "features": ["Caf√© de origen", "Reposter√≠a casera", "WiFi gratuito"],
            "description": "Caf√© acogedor para pruebas del sistema"
        }
    }
    
    if restaurant_id in restaurants:
        return {
            "status": "success",
            "restaurant_id": restaurant_id,
            "info": restaurants[restaurant_id]
        }
    else:
        return {
            "status": "error",
            "error_message": f"Restaurante '{restaurant_id}' no encontrado",
            "available_restaurants": list(restaurants.keys())
        }

def get_menu_sample(restaurant_id: str = "bistro_madrid", category: str = "entrantes") -> Dict[str, Any]:
    """Obtiene una muestra del men√∫ de un restaurante espec√≠fico"""
    menus = {
        "bistro_madrid": {
            "entrantes": [
                {
                    "name": "Burrata con tomate y albahaca",
                    "price": "14‚Ç¨",
                    "description": "Burrata fresca con tomates de temporada"
                },
                {
                    "name": "Croquetas de jam√≥n ib√©rico",
                    "price": "12‚Ç¨", 
                    "description": "Croquetas cremosas con jam√≥n ib√©rico de bellota"
                }
            ],
            "principales": [
                {
                    "name": "Paella de mariscos",
                    "price": "28‚Ç¨",
                    "description": "Paella tradicional con mariscos frescos del Mediterr√°neo"
                },
                {
                    "name": "Risotto de setas",
                    "price": "22‚Ç¨",
                    "description": "Risotto cremoso con setas de temporada y trufa"
                }
            ]
        },
        "pizza_palace": {
            "pizzas": [
                {
                    "name": "Margherita Premium",
                    "price": "16‚Ç¨",
                    "description": "Salsa de tomate San Marzano, mozzarella di bufala, albahaca"
                },
                {
                    "name": "Quattro Stagioni", 
                    "price": "19‚Ç¨",
                    "description": "Tomate, mozzarella, jam√≥n, setas, alcachofas, aceitunas"
                }
            ]
        }
    }
    
    if restaurant_id in menus:
        restaurant_menu = menus[restaurant_id]
        if category in restaurant_menu:
            return {
                "status": "success",
                "restaurant_id": restaurant_id,
                "category": category,
                "items": restaurant_menu[category],
                "available_categories": list(restaurant_menu.keys())
            }
        else:
            return {
                "status": "error", 
                "error_message": f"Categor√≠a '{category}' no encontrada",
                "available_categories": list(restaurant_menu.keys())
            }
    else:
        return {
            "status": "error",
            "error_message": f"Restaurante '{restaurant_id}' no encontrado",
            "available_restaurants": list(menus.keys())
        }

# 3. Crear agente coordinador principal
print("ü§ñ Paso 2: Creando sistema multi-agente...")

restaurant_system_agent = Agent(
    name="restaurant_system_coordinator",
    model="gemini-2.0-flash",
    description="Coordinador principal del sistema SaaS de restaurantes que puede proporcionar informaci√≥n sobre m√∫ltiples restaurantes, sus men√∫s y servicios",
    instruction="""
Eres el coordinador principal de un sistema SaaS para restaurantes. Puedes ayudar con:

1. **Informaci√≥n de restaurantes**: Proporcionar detalles sobre los restaurantes disponibles en la plataforma
2. **Gesti√≥n de men√∫s**: Mostrar platos, precios y descripciones de los men√∫s
3. **Recomendaciones**: Sugerir restaurantes y platos seg√∫n las preferencias del usuario
4. **Navegaci√≥n del sistema**: Ayudar a los usuarios a explorar las opciones disponibles

**Instrucciones espec√≠ficas:**
- Siempre s√© amable y profesional
- Proporciona informaci√≥n detallada y √∫til
- Si no tienes informaci√≥n espec√≠fica, usa las herramientas disponibles
- Explica las opciones disponibles cuando sea relevante
- Adapta tu respuesta al tipo de consulta del usuario

**Restaurantes disponibles:**
- Bistro Madrid (moderna mediterr√°nea)
- Pizza Palace (pizzer√≠a italiana) 
- Demo Restaurant (alta cocina)
- Caf√© Madrid Test (cafeter√≠a)

Cuando recibas una consulta, eval√∫a qu√© tipo de informaci√≥n necesita el usuario y utiliza las herramientas apropiadas.
    """,
    tools=[
        FunctionTool(func=get_available_restaurants),
        FunctionTool(func=get_restaurant_info), 
        FunctionTool(func=get_menu_sample)
    ],
)

print("‚úÖ Agente coordinador creado exitosamente")

# 4. Preparar agente para Agent Engine
print("üì¶ Paso 3: Preparando agente para despliegue...")

app = reasoning_engines.AdkApp(
    agent=restaurant_system_agent,
    enable_tracing=True,
)

print("‚úÖ Agente preparado para Agent Engine")

# 5. Prueba local
print("üß™ Paso 4: Probando agente localmente...")

try:
    session = app.create_session(user_id="test_user")
    print(f"   ‚úÖ Sesi√≥n local creada: {session.id}")
    
    print("   üîç Enviando consulta de prueba...")
    response_events = []
    for event in app.stream_query(
        user_id="test_user",
        session_id=session.id,
        message="¬øQu√© restaurantes ten√©is disponibles?",
    ):
        response_events.append(event)
        if 'content' in event and 'parts' in event['content']:
            for part in event['content']['parts']:
                if 'text' in part:
                    print(f"   üìù Respuesta: {part['text'].strip()[:100]}...")
    
    print("‚úÖ Prueba local exitosa")
    
except Exception as e:
    print(f"‚ùå Error en prueba local: {e}")
    sys.exit(1)

# 6. Desplegar en Agent Engine  
print("üöÄ Paso 5: Desplegando en Vertex AI Agent Engine...")

try:
    # Configuraci√≥n para despliegue modular
    requirements = [
        "google-cloud-aiplatform[agent_engines,adk]==1.88.0",
        "google-adk-python>=1.5.0",
        "jsonschema>=4.0.0"
    ]
    
    # Archivos y directorios locales a incluir (en lugar de c√≥digo autocontenido)
    extra_packages = [
        "src/",           # Todo el c√≥digo fuente modular
        "schemas/",       # Schemas de validaci√≥n
        "restaurant_data/", # Datos de configuraci√≥n de restaurantes
        "templates/"      # Templates de configuraci√≥n
    ]
    
    # Variables de entorno para el agente desplegado
    env_vars = {
        "RESTAURANT_SYSTEM_MODE": "production",
        "LOG_LEVEL": "INFO",
        "VERTEX_AI_REGION": LOCATION
    }
    
    remote_agent = agent_engines.create(
        agent_engine=restaurant_system_agent,
        requirements=requirements,
        extra_packages=extra_packages,
        env_vars=env_vars,
        display_name="Restaurant SaaS System - ADK Multi-Agent",
        description="Sistema SaaS multi-tenant para restaurantes usando arquitectura multi-agente ADK",
        gcs_dir_name="restaurant_saas_adk_v1"
    )
    
    print("‚úÖ Despliegue completado exitosamente")
    print(f"   üéØ Resource name: {remote_agent.resource_name}")
    
except Exception as e:
    print(f"‚ùå Error en despliegue: {e}")
    print(f"   üîç Tipo de error: {type(e)}")
    sys.exit(1)

# 7. Prueba remota
print("üåê Paso 6: Probando agente remotamente...")

try:
    # Crear sesi√≥n remota
    remote_session = remote_agent.create_session(user_id="production_user")
    print(f"   ‚úÖ Sesi√≥n remota creada: {remote_session['id']}")
    
    # Probar consulta remota
    print("   üîç Enviando consulta remota...")
    remote_events = []
    for event in remote_agent.stream_query(
        user_id="production_user",
        session_id=remote_session["id"],
        message="Dime informaci√≥n sobre Bistro Madrid y mu√©strame algunos platos del men√∫",
    ):
        remote_events.append(event)
        if 'content' in event and 'parts' in event['content']:
            for part in event['content']['parts']:
                if 'text' in part:
                    print(f"   üìù Respuesta remota: {part['text'].strip()[:150]}...")
    
    print("‚úÖ Prueba remota exitosa")
    
except Exception as e:
    print(f"‚ùå Error en prueba remota: {e}")

# 8. Resumen final
print("\n" + "=" * 60)
print("üéâ DESPLIEGUE COMPLETADO - Sistema Multi-Agente ADK")
print("=" * 60)
print(f"üìã Resource ID: {remote_agent.resource_name}")
print(f"üèóÔ∏è  Arquitectura: Multi-agente modular con extra_packages")
print(f"üîß Herramientas: {len(restaurant_system_agent.tools)} herramientas especializadas")
print(f"üìä Restaurantes: 4 restaurantes demo configurados")
print(f"‚öôÔ∏è  Modo: Producci√≥n con configuraci√≥n din√°mica")
print("\nüßπ Para limpiar recursos:")
print("   remote_agent.delete(force=True)")
print("\nüéØ El agente est√° listo para recibir consultas en producci√≥n!") 