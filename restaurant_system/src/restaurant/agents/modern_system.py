"""
Sistema multiagente moderno para restaurante siguiendo mejores pr√°cticas de ADK.
Basado en el repositorio oficial: https://github.com/google/adk-python.git
"""

from google.adk.agents import Agent
from google.adk.tools import FunctionTool

from ..config.system_config import RESTAURANT_DATA


def create_food_specialist():
    """Crear agente especialista en comida usando mejores pr√°cticas ADK."""
    
    def get_menu_items(category: str = "all") -> str:
        """Obtener elementos del men√∫ por categor√≠a."""
        menu = RESTAURANT_DATA["menu"]
        if category == "all":
            result = "üçΩÔ∏è **MEN√ö COMPLETO DEL RESTAURANTE**\n\n"
            for cat, items in menu.items():
                result += f"**{cat.upper().replace('_', ' ')}:**\n"
                for item in items:
                    name = item.get("name", "Sin nombre")
                    price = item.get("price", "Consultar")
                    ingredients = item.get("ingredients", [])
                    desc = f"Ingredientes: {', '.join(ingredients)}" if ingredients else ""
                    result += f"‚Ä¢ {name} - ${price}\n  {desc}\n\n"
            return result
        elif category in menu:
            result = f"üçΩÔ∏è **{category.upper().replace('_', ' ')}**\n\n"
            for item in menu[category]:
                name = item.get("name", "Sin nombre")
                price = item.get("price", "Consultar")
                ingredients = item.get("ingredients", [])
                desc = f"Ingredientes: {', '.join(ingredients)}" if ingredients else ""
                result += f"‚Ä¢ {name} - ${price}\n  {desc}\n\n"
            return result
        else:
            return f"Categor√≠a '{category}' no encontrada. Categor√≠as disponibles: {', '.join(menu.keys())}"

    def get_dish_details(dish_name: str) -> str:
        """Obtener detalles espec√≠ficos de un plato."""
        menu = RESTAURANT_DATA["menu"]
        for category, dishes in menu.items():
            for dish in dishes:  # dishes es una lista, no diccionario
                if dish_name.lower() in dish.get("name", "").lower():
                    name = dish.get("name", "Sin nombre")
                    ingredients = dish.get("ingredients", [])
                    allergens = dish.get("allergens", [])
                    price = dish.get("price", "Consultar")
                    calories = dish.get("calories", "No disponible")
                    diet_tags = dish.get("diet_tags", [])
                    
                    result = f"üçΩÔ∏è **{name}** (${price})\n\n"
                    if ingredients:
                        result += f"ü•ò **Ingredientes:** {', '.join(ingredients)}\n\n"
                    if allergens:
                        result += f"‚ö†Ô∏è **Al√©rgenos:** {', '.join(allergens)}\n\n"
                    if diet_tags:
                        result += f"üå± **Caracter√≠sticas:** {', '.join(diet_tags)}\n\n"
                    result += f"üìä **Calor√≠as:** {calories}\n\n"
                    return result
        return f"Plato '{dish_name}' no encontrado en nuestro men√∫."

    def check_dietary_options(diet_type: str) -> str:
        """Verificar opciones diet√©ticas disponibles."""
        menu = RESTAURANT_DATA["menu"]
        options = []
        
        for category, dishes in menu.items():
            for dish in dishes:  # dishes es una lista
                name = dish.get("name", "Sin nombre")
                allergens = dish.get("allergens", [])
                diet_tags = dish.get("diet_tags", [])
                price = dish.get("price", "Consultar")
                
                # Verificar opciones diet√©ticas
                is_suitable = False
                if diet_type.lower() in ["sin gluten", "gluten-free", "celiac"]:
                    if "gluten" not in [a.lower() for a in allergens]:
                        is_suitable = True
                elif diet_type.lower() in ["vegetariano", "vegetarian"]:
                    if "vegetariano" in [d.lower() for d in diet_tags]:
                        is_suitable = True
                elif diet_type.lower() in ["vegano", "vegan"]:
                    if "vegano" in [d.lower() for d in diet_tags]:
                        is_suitable = True
                
                if is_suitable:
                    category_name = category.replace('_', ' ').title()
                    options.append(f"‚Ä¢ {name} - ${price} ({category_name})")
        
        if options:
            return f"üå± **Opciones {diet_type}:**\n\n" + "\n".join(options)
        else:
            return f"Lo siento, actualmente no tenemos opciones espec√≠ficas para {diet_type}. ¬øTe gustar√≠a que consulte con el chef sobre adaptaciones?"

    # Crear agente especialista en comida usando la nueva API Agent
    food_agent = Agent(
        name="FoodSpecialist",
        model="gemini-2.0-flash-exp",  # Simplificado seg√∫n mejores pr√°cticas
        instruction="""
Eres el especialista en comida del restaurante. Tu expertise incluye:

üçΩÔ∏è **MEN√ö Y PLATOS:**
- Conoces todos los platos del men√∫ al detalle
- Puedes recomendar seg√∫n preferencias del cliente
- Explicas ingredientes y preparaci√≥n

‚ö†Ô∏è **ALERGIAS Y DIETAS:**
- Identificas al√©rgenos en cada plato
- Ofreces alternativas para dietas especiales
- Priorizas la seguridad alimentaria

üéØ **ESTILO DE COMUNICACI√ìN:**
- S√© entusiasta sobre la comida
- Ofrece detalles espec√≠ficos y √∫tiles
- Haz recomendaciones personalizadas
- Mant√©n un tono c√°lido y profesional

**INSTRUCCIONES:**
1. Usa las herramientas disponibles para consultar informaci√≥n precisa
2. Siempre verifica al√©rgenos cuando sea relevante
3. Ofrece alternativas cuando algo no est√© disponible
4. S√© descriptivo sobre sabores y preparaci√≥n
""",
        description="Especialista en men√∫, ingredientes y opciones diet√©ticas",
        tools=[
            FunctionTool(get_menu_items),
            FunctionTool(get_dish_details),
            FunctionTool(check_dietary_options)
        ]
    )
    
    return food_agent


def create_coordinator_agent():
    """Crear agente coordinador principal usando el patr√≥n sub_agents moderno."""
    
    # Crear agentes especialistas
    food_specialist = create_food_specialist()
    
    # Crear agente coordinador con sub_agents usando la nueva API Agent
    coordinator = Agent(
        name="RestaurantCoordinator",
        model="gemini-2.0-flash-exp",  # Simplificado seg√∫n mejores pr√°cticas
        instruction="""
Eres el coordinador principal de un restaurante premium. Tu misi√≥n es brindar una experiencia excepcional mediante:

üéØ **TU PAPEL PRINCIPAL:**
- Eres la cara visible del restaurante
- Coordinas con especialistas para respuestas precisas
- Mantienes conversaciones fluidas y naturales

üß† **AN√ÅLISIS DE CONSULTAS:**
- Comida/Men√∫ ‚Üí Deriva a FoodSpecialist
- Bebidas/Vinos ‚Üí (Pr√≥ximamente: DrinksSpecialist)
- Nutrici√≥n/Dietas ‚Üí Usa FoodSpecialist para opciones diet√©ticas
- Consultas generales ‚Üí Responde directamente

üó£Ô∏è **COMUNICACI√ìN:**
- Detecta y responde en el idioma del cliente
- Mant√©n un tono c√°lido y profesional
- Haz preguntas clarificadoras cuando sea necesario
- Unifica respuestas de especialistas en una conversaci√≥n coherente

üîÑ **FLUJO DE TRABAJO:**
1. Analiza la intenci√≥n del cliente
2. Si es sobre comida/men√∫ ‚Üí colabora con FoodSpecialist
3. Presenta la informaci√≥n de manera conversacional
4. Ofrece seguimiento o informaci√≥n adicional

**EJEMPLOS:**
Cliente: "¬øQu√© tienen de men√∫?"
‚Üí Colabora con FoodSpecialist para obtener el men√∫ completo

Cliente: "¬øTienen opciones sin gluten?"
‚Üí Colabora con FoodSpecialist para verificar opciones diet√©ticas

Cliente: "¬øCu√°les son los ingredientes de la paella?"
‚Üí Colabora con FoodSpecialist para detalles espec√≠ficos del plato
""",
        description="Coordinador principal del restaurante con acceso a especialistas",
        sub_agents=[food_specialist]  # ¬°ESTO ES LA CLAVE! Patr√≥n moderno ADK
    )
    
    return coordinator


def create_modern_restaurant_system():
    """Crear sistema completo usando mejores pr√°cticas ADK."""
    coordinator = create_coordinator_agent()
    return coordinator


# Crear instancia del sistema para uso directo
restaurant_system = create_modern_restaurant_system() 