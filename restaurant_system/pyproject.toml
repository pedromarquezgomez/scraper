[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "restaurant-multiagent-system"
description = "Sistema multiagente para restaurante basado en Agent Development Kit (ADK)"
authors = [
    {name = "Restaurant AI Team", email = "team@restaurant-ai.com"},
]
license = {text = "Apache-2.0"}
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "adk",
    "agents",
    "multi-agent",
    "restaurant",
    "ai",
    "llm",
    "genai",
    "agentic-ai"
]
dynamic = ["version"]

dependencies = [
    "google-adk>=1.5.0",
    "google-generativeai>=0.8.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "asyncio-extras>=1.3.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

evaluation = [
    "google-adk[evaluation]",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]

deployment = [
    "google-cloud-run>=1.0.0",
    "uvicorn[standard]>=0.23.0",
    "fastapi>=0.100.0",
    "gunicorn>=21.0.0",
]

all = [
    "restaurant-multiagent-system[dev,evaluation,deployment]"
]

[project.urls]
Homepage = "https://github.com/restaurant-ai/multiagent-system"
Documentation = "https://restaurant-ai.github.io/multiagent-system/"
Repository = "https://github.com/restaurant-ai/multiagent-system.git"
"Bug Tracker" = "https://github.com/restaurant-ai/multiagent-system/issues"

[project.scripts]
restaurant-system = "restaurant_system.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["restaurant"]

[tool.setuptools_scm]
write_to = "src/restaurant/_version.py"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["restaurant"]
known_third_party = ["google", "pydantic", "pytest"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "google.*",
    "pytest.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/restaurant",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
branch = true
source = ["src/restaurant"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# See .flake8 or setup.cfg for flake8 configuration 